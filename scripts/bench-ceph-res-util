#!/usr/bin/env bash
#
# Require bash version >= 4.4
#
# This script depends on passwordless ssh and passwordless sudo via the current
# user ($USER) on remote hosts.

set -euo pipefail

readonly ADD_OPTSTRING="p:"
readonly ADD_OPTIONS_USAGE=(
  "-p <CATEGORY/TYPE>"
)
readonly ADD_OPTIONS_USAGE_DESC=(
  "
  -p : (\$MACHINE_PROFILE)    Machine profile in the form of CATEGORY/TYPE.
                             CATEGORY is the subdirectory under the dir parted_script.
                             TYPE is the first colume of a line in the script file of the subdirectory."
)

add_options_handler() {
  local -r option="$1" optarg="$2"
  case $option in
    p  )
      readonly MACHINE_PROFILE="$optarg"
      return 0
      ;;
  esac
  return 1
}

readonly bench_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

export CMD_MODE=false
# shellcheck source=./ceph-deploy
. "$bench_SCRIPT_DIR"/ceph-deploy


if [[ -z "${MACHINE_PROFILE:-}" ]]; then
  usage
  common::err $(( ERR_STATUS_START + 2 )) "Please specify the machine profile"
fi

EXPECTED_PARTITION=
PARTED_SCRIPT=
parse_machine_profile() {
  local category_type
  IFS='/' read -ra category_type <<< "$MACHINE_PROFILE"
  if (( "${#category_type[@]}" != 2 )); then
    common::err $(( ERR_STATUS_START + 3 )) \
      "Invalid MACHINE_PROFILE format (CATEGORY/TYPE): $MACHINE_PROFILE"
  fi

  local category_dir="$bench_SCRIPT_DIR/${category_type[0]}"
  if [[ ! -d "$category_dir" ]]; then
    common::err $(( ERR_STATUS_START + 4 )) "Machine profile '$MACHINE_PROFILE' does not exist!"
  fi

  local line
  if ! line="$(grep --fixed-strings -- "${category_type[1]}" "$category_dir/script")"; then
    common::err $(( ERR_STATUS_START + 4 )) "Machine profile '$MACHINE_PROFILE' does not exist!"
  fi
  
  EXPECTED_PARTITION="$(cut -f2 <<< "$line")"
  PARTED_SCRIPT="$(cut -f3- <<< "$line")"
}
parse_machine_profile

echo "[$EXPECTED_PARTITION]"
echo "[$PARTED_SCRIPT]"
exit


docker_install() {
  local -ar all_hosts=( "$MON_IP" "${OSD_HOSTS[@]}" )

  local host first_install=true
  for host in "${all_hosts[@]}"; do
    if ! ssh "${SSH_COMM_OPTIONS[@]}" "$USER@$host" \
      command -v "docker" >/dev/null 2>&1; then
      if [[ "$first_install" == false ]]; then
        echo
      fi
      common::info "> Installing docker on host '$host'"
      INFO_LEVEL=2 "$bench_SCRIPT_DIR"/parallel-docker-install --host "$host"
      first_install=false
    fi
  done
}
stage "Check and install docker..."
docker_install


create_lvs() {
  local host ssh_cmd
  for host in "${OSD_HOSTS[@]}"; do
    parted_script="$"
    ssh_cmd="ssh ${SSH_COMM_OPTIONS[*]} $USER@$host"
    $ssh_cmd sfdisk

  done
}
stage "Create logical volumes on hosts"
create_lvs


ceph_deploy::deploy

#!/usr/bin/env bash
#
# Require bash version >= 4.4
#
# This script depends on passwordless ssh and passwordless sudo via the current
# user ($USER) on remote hosts.

set -euo pipefail

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# shellcheck source=./common.sh
. "$SCRIPT_DIR/common.sh"


usage() {
  cat <<EOF
Usage: $0 -m MON_IP -h OSD_HOST [-h OSD_HOST]... -s SCRIPT_FILE

Options:
  -m :         IP address for the clusterâ€™s monitor daemon.
  -h :         OSD host (e.g., -h host1 -h host2).
  -s :         the remote script (relative path to the remote_script/ceph_volume dir)
               for creating and querying ceph volumes on each host.

Defining the LVS_PROVISION=no can skip the logical volumes provisioning on hosts.

All SSH connections to host clusters will use the user defined by '\$USER' (current: $USER).

EOF
}

if (( $# < 2 )); then
  usage
  exit
fi


OSD_HOSTS=()
while getopts ":m:h:s:" option; do
  case $option in
    m  ) readonly MON_IP=$OPTARG ;;
    h  ) OSD_HOSTS+=("$OPTARG") ;;
    s  ) SCRIPT_FILE=$OPTARG ;;
    \? )
      usage
      common::err $(( ERR_STATUS_START + 1 )) "Invalid option: -$OPTARG"
      ;;
    :  )
      usage
      common::err $(( ERR_STATUS_START + 1 )) "Option -$OPTARG requires an argument."
      ;;
    *  )
      usage
      exit
  esac
done
shift "$(( OPTIND - 1 ))"

if [[ -z "${MON_IP:-}" ]]; then
  usage
  common::err $(( ERR_STATUS_START + 2 )) \
    "Please specify the IP address of the monitor using '-m'"
fi

if ! [[ "$MON_IP" =~ ^[[:digit:].]+$ ]]; then
  common::err $(( ERR_STATUS_START + 3 )) "Invalid IP address: $MON_IP"
fi

if (( "${#OSD_HOSTS[@]}" == 0 )); then
  usage
  common::err $(( ERR_STATUS_START + 2 )) "Please specify OSD_HOSTS using '-h'"
fi

if [[ -z "${SCRIPT_FILE:-}" ]]; then
  common::err $(( ERR_STATUS_START + 2 )) \
    "Please specify the SCRIPT_FILE using '-s'"
fi

if ! [[ -f "$SCRIPT_DIR/remote_script/ceph_volume/$SCRIPT_FILE" ]]; then
  common::err $(( ERR_STATUS_START + 3 )) \
    "Cannot find the script file '$SCRIPT_FILE' under the remote_script/ceph_volume dir"
fi

common::debug OSD_HOSTS: "$(common::print_array OSD_HOSTS)"


install_docker_sar() {
  local -ar all_hosts=( "$MON_IP" "${OSD_HOSTS[@]}" )
  local -a install_docker_hosts_param=() install_sar_hosts_param=()
  local host

  for host in "${all_hosts[@]}"; do
    if ! ssh "${SSH_COMM_OPTIONS[@]}" "$USER@$host" \
      command -v "docker" >/dev/null 2>&1; then
      install_docker_hosts_param+=( --host "$host" )
    fi

    if ! ssh "${SSH_COMM_OPTIONS[@]}" "$USER@$host" \
      command -v "sar" >/dev/null 2>&1; then
      install_sar_hosts_param+=( --host "$host" )
    fi
  done

  if (( ${#install_docker_hosts_param[@]} )); then
    "$SCRIPT_DIR"/parallel-docker-install \
      --env INFO_LEVEL=1 \
      "${install_docker_hosts_param[@]}"
  fi

  if (( ${#install_sar_hosts_param[@]} )); then
    CMD_MODE=false "$SCRIPT_DIR"/parallel-exec-script \
      --script=install/sysstat \
      --env INFO_LEVEL=1 \
      "${install_sar_hosts_param[@]}"
  fi
}
common::stage "Check and install docker and sar..."
install_docker_sar

# shellcheck source=./remote_script/ceph_volume/interfaces.sh
. "$SCRIPT_DIR"/remote_script/ceph_volume/interfaces.sh

create_ceph_lvs() {
  local -a hosts_param
  local host

  for host in "${OSD_HOSTS[@]}"; do
    hosts_param+=( --host "$host" )
  done

  "$SCRIPT_DIR"/parallel-exec-script \
    --script ceph_volume/"$SCRIPT_FILE" \
    --env INFO_LEVEL=1 \
    --env CEPH_VOLUME_OPERATION="$CEPH_VOLUME_OPERATION_CREATE" \
    "${hosts_param[@]}"
}
if [[ "${LVS_PROVISION:-yes}" != "no" ]]; then
  common::stage "Create logical volumes on OSD hosts..."
  create_ceph_lvs
fi


deploy_ceph() {
  local -a host_osds_param
  local host host_lvs joined

  for host in "${OSD_HOSTS[@]}"; do
    host_lvs=("$(
      "$SCRIPT_DIR"/parallel-exec-script \
        --script ceph_volume/"$SCRIPT_FILE" \
        --env INFO_LEVEL=1 \
        --env CEPH_VOLUME_OPERATION="$CEPH_VOLUME_OPERATION_QUERY" \
        --host "$host" | common::parse_remote_out
    )")

    printf -v joined '%s,' "${host_lvs[@]}"
    host_osds_param+=( -o "$host:${joined%,}" )
  done

  "$SCRIPT_DIR"/ceph-deploy -m "$MON_IP" "${host_osds_param[@]}"
}


main() {
  deploy_ceph
}
main

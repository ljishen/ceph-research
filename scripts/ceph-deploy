#!/usr/bin/env bash
#
# Require bash version >= 4.4
#
# This script depends on passwordless ssh and passwordless sudo via
# the current user ($USER) on remote hosts.

set -euo pipefail

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# shellcheck source=./common.sh
. "$SCRIPT_DIR/common.sh"


# MON_IP much be a locally configured IP
#   https://github.com/ceph/ceph/blob/v17.0.0/src/cephadm/cephadm#L3199
usage() {
  cat <<EOF
Usage: $0 -m MON_IP -o <HOST_OSD_DEVICES> [-o <HOST_OSD_DEVICES> ...]
  -m : (\$MON_IP)             IP address for the clusterâ€™s monitor daemon
                             (must be a locally configured IP)
  -o : (\$HOST_OSD_DEVICES)   Create an OSD on the storage device of the host defined by:
                               HOST_OSD_DEVICES := host:DEVICE1[,DEVICE2,...]
                               DEVICE := /dev/XXX | volume_group/logical_volume
                             The device can only be a raw block device or a LVM logical volume.
  -h :                       Show this help text

All SSH connections to the cluster hosts will use the user '\$USER' (current: $USER).

EOF
}

HOST_OSD_DEVICES=()
while getopts ":m:o:h" option; do
  case $option in
    m  ) readonly MON_IP=$OPTARG ;;
    o  ) HOST_OSD_DEVICES+=("$OPTARG") ;;
    h  )
      usage
      exit
      ;;
    \? )
      usage
      common::err $(( ERR_STATUS_START + 1 )) "Invalid option: -$OPTARG"
      ;;
    :  )
      usage
      common::err $(( ERR_STATUS_START + 1 )) "Option -$OPTARG requires an argument."
      ;;
    *  )
      usage
      exit
  esac
done
shift "$(( OPTIND - 1 ))"

if [[ -z "${MON_IP:-}" ]]; then
  usage
  common::err $(( ERR_STATUS_START + 2 )) \
    "Please specify the IP address of the monitor"
fi

if ! [[ "$MON_IP" =~ ^[[:digit:].]+$ ]]; then
  common::err $(( ERR_STATUS_START + 3 )) "Invalid IP address: $MON_IP"
fi

if (( "${#HOST_OSD_DEVICES[@]}" == 0 )); then
  usage
  common::err $(( ERR_STATUS_START + 2 )) "Please specify HOST_OSD_DEVICES for OSDs"
fi

parse_osd_devices() {
  local -n _device_arr=$1
  # shellcheck disable=SC2034
  IFS=',' read -ra _device_arr <<< "$2"
}

index_of_arr() {
  local -nr arr=$1
  local -r lookfor="$2"
  local -i idx found_idx=-1
  for idx in "${!arr[@]}"; do
    if [[ "${arr[idx]}" == "$lookfor" ]]; then
      found_idx="$idx"
      break
    fi
  done
  echo "$found_idx"
}

OSD_HOSTS=()
OSD_DEVICES=()
populate_osd_host_devices() {
  local host_devices_str
  for host_devices_str in "${HOST_OSD_DEVICES[@]}"; do
    local -a host_devices_arr
    IFS=':' read -ra host_devices_arr <<< "$host_devices_str"
    if (( ${#host_devices_arr[@]} != 2 )); then
      common::err $(( ERR_STATUS_START + 3 )) \
        "Invalid HOST_OSD_DEVICES format (host:DEVICE1[,DEVICE2,...]): $host_devices_str"
    fi
    if [[ "${host_devices_arr[0]}" == *@* ]]; then
      common::err $(( ERR_STATUS_START + 3 )) "All SSH connections use the user defined by '\$USER' (current: $USER)"
    fi

    local -i index_of_hosts
    # shellcheck disable=SC2034
    local -a prev_devices
    index_of_hosts=$(index_of_arr OSD_HOSTS "${host_devices_arr[0]}")
    if (( index_of_hosts >= 0 )); then
        parse_osd_devices prev_devices "${OSD_DEVICES[index_of_hosts]}"
    fi

    local -a devices
    local -i index_of_devices
    parse_osd_devices devices "${host_devices_arr[1]}"
    for device in "${devices[@]}"; do
      if (( index_of_hosts >= 0 )); then
        index_of_devices=$(index_of_arr prev_devices "$device")
        if (( index_of_devices >= 0 )); then
          common::err $(( ERR_STATUS_START + 3 )) \
            "Duplicated device '$device' specified for host '${host_devices_arr[0]}'"
        fi
      fi
    done

    OSD_HOSTS+=("${host_devices_arr[0]}")
    OSD_DEVICES+=("${host_devices_arr[1]}")
  done
}
populate_osd_host_devices

is_raw_block_device() {
  local -r device="$1"
  # logical volume name cannot contains "/"
  #   https://github.com/lvmteam/lvm2/blob/v2_03_10/tools/toollib.c#L396
  [[ "$device" =~ ^/dev/ ]]
}

verify_parameters() {
  common::stage "Verify passwordless SSH to hosts, passwordless sudo via $USER, and the existence of devices on hosts..."

  local -i exit_status=0

  INFO_LEVEL=1
  common::info "Check the host for the monitor"
  trace_on
  ssh "${SSH_COMM_OPTIONS[@]}" "$USER@$MON_IP" \
    sudo --non-interactive --validate \
    || exit_status=$?
  trace_off
  if (( exit_status )); then
    common::err $exit_status \
      "Failed to validate SSHing to the monitor IP ($MON_IP)"
  fi

  common::info "Check hosts for OSDs"
  local -i idx
  local host ssh_cmd
  for idx in "${!OSD_HOSTS[@]}"; do
    host="${OSD_HOSTS[idx]}"
    ssh_cmd="ssh ${SSH_COMM_OPTIONS[*]} $USER@$host"

    INFO_LEVEL=2 common::info "Check host '$host'"
    trace_on
    $ssh_cmd  \
      sudo --non-interactive --validate \
      || exit_status=$?
    trace_off
    if (( exit_status )); then
      common::err $exit_status \
        "Failed to validate SSHing to host '$host'"
    fi

    local -a devices
    parse_osd_devices devices "${OSD_DEVICES[idx]}"
    for device in "${devices[@]}"; do
      INFO_LEVEL=3 common::info "Check device '$device'"
      if is_raw_block_device "$device"; then
        trace_on
        $ssh_cmd \
          test -b "$device" \
          || exit_status=$?
        trace_off
        if (( exit_status )); then
          common::err $exit_status \
            "Raw block device '$device' does not exist on host '$host'!"
        fi

        trace_on
        $ssh_cmd \
          lsblk --nodeps --noheadings --output TYPE "$device" 2>/dev/null \
          | grep --word-regexp disk >/dev/null \
          || exit_status=$?
        trace_off
        if (( exit_status )); then
          # OSD devices can only be LVs or raw block devices:
          #   https://github.com/ceph/ceph/blob/v17.0.0/src/ceph-volume/ceph_volume/util/arg_validators.py#L55
          common::err $exit_status \
            "'$device' is not a raw block device, please pass LVs or raw block devices for host '$host'"
        fi
      elif [[ "$device" =~ ^[^[:space:]/]+/[^[:space:]/]+$ ]]; then
        # device is a LVM logical volume
        #   https://github.com/ceph/ceph/blob/v17.0.0/src/ceph-volume/ceph_volume/util/device.py#L162
        local device_vglv device_vg device_lv
        IFS='/' read -ra device_vglv <<< "$device"
        if (( ${#device_vglv[@]} != 2 )); then
          common::err $(( ERR_STATUS_START + 4 )) \
            "Invalid DEVICE '$device' format (/dev/XXX | volume_group/logical_volume) for host '$host'!"
        fi
        device_vg="${device_vglv[0]}"
        device_lv="${device_vglv[1]}"

        trace_on
        $ssh_cmd sudo \
          lvs --noheadings --readonly --options lv_name \
            "${device_vg:+--select vg_name=$device_vg}" \
          | grep --word-regexp "$device_lv" >/dev/null \
          || exit_status=$?
        trace_off
        if (( exit_status )); then
          common::err $exit_status \
            "Logical volume '$device' does not exist on host '$host'!"
        fi
      else
        common::err $(( ERR_STATUS_START + 4 )) \
          "Invalid DEVICE '$device' format (/dev/XXX | volume_group/logical_volume) for host '$host'!"
      fi
    done
  done
}
verify_parameters


readonly CONFIG_OUTPUT_DIR="$DEPLOYMENT_DATA_ROOT"/etc/ceph
readonly CEPHADM="$SCRIPT_DIR"/parallel-cephadm
readonly CEPH_SHELL="$CEPHADM shell --keyring $CONFIG_OUTPUT_DIR/ceph.client.admin.keyring"
readonly CEPH="$CEPH_SHELL -- ceph"

reset_host_devices() {
  common::stage "Reset devices on hosts..."

  local -i idx exit_status=0
  for idx in "${!OSD_HOSTS[@]}"; do
    local -a devices
    parse_osd_devices devices "${OSD_DEVICES[idx]}"

    for device in "${devices[@]}"; do
      INFO_LEVEL=1 common::info "Resetting device '$device' on host '${OSD_HOSTS[idx]}'"
      if is_raw_block_device "$device"; then
        trace_on
        # require passwordless sudo configured for $USER
        # shellcheck disable=SC2087
        ssh "${SSH_COMM_OPTIONS[@]}" "$USER@${OSD_HOSTS[idx]}" \
          sudo sh <<EOF || exit_status=$?
            pvs --noheadings --readonly --options vg_name \
              --select "pv_name=$device" \
            | xargs -I '{}' vgremove --force --verbose '{}'
EOF
        trace_off
        if (( exit_status )); then
          common::err $exit_status \
            "Fail to reset device '$device' on host '${OSD_HOSTS[idx]}'"
        fi
      else
        trace_on
        $CEPHADM --host "${OSD_HOSTS[idx]}" ceph-volume lvm zap "$device"
        trace_off
      fi
    done
  done
}

bootstrap_cluster() {
  common::stage "Bootstrap a new cluster..."

  trace_on
  $CEPHADM bootstrap \
    --config "$SCRIPT_DIR"/ceph.conf \
    --mon-ip "$MON_IP" \
    --output-dir "$CONFIG_OUTPUT_DIR" \
    --ssh-user "$USER" \
    --skip-dashboard \
    --no-minimize-config \
    --allow-overwrite \
    --allow-fqdn-hostname \
    --orphan-initial-daemons \
    --skip-monitoring-stack
  trace_off

  INFO_LEVEL=1
  common::info "Set the default number of monitor daemons to 1"
  trace_on
  $CEPH orch apply mon 1
  trace_off
  common::info "Set the default number of manager daemons to 1"
  trace_on
  $CEPH orch apply mgr 1
  trace_off
}

show_status() {
  common::stage "Show Cluster Status"

  trace_on
  $CEPH --status
  trace_off
}

add_hosts() {
  common::stage "Add hosts to the cluster..."

  local host skip added_host added_hosts=()
  for host in "${OSD_HOSTS[@]}"; do
    skip=false
    for added_host in "${added_hosts[@]}"; do
      if [[ "$host" == "$added_host" ]]; then
        skip=true
        break
      fi
    done
    if [[ "$skip" == true ]]; then
      continue
    fi

    INFO_LEVEL=1 common::info "Adding host '$host'"
    trace_on
    ssh-copy-id "${SSH_COMM_OPTIONS[@]}" \
      -f -i "$CONFIG_OUTPUT_DIR"/ceph.pub \
      "$USER@$host"
    trace_off

    trace_on
    $CEPH orch host add "$host"
    trace_off

    added_hosts+=("$host")
  done
}

add_host_devices_as_osds() {
  common::stage "Add OSDs to the cluster..."

  local -i idx
  for idx in "${!OSD_HOSTS[@]}"; do
    local -a devices
    parse_osd_devices devices "${OSD_DEVICES[idx]}"

    INFO_LEVEL=1
    common::info "Adding devices" \
      "$(common::print_array devices)" "on host '${OSD_HOSTS[idx]}' as OSDs"
    trace_on
    $CEPH orch daemon add osd "${OSD_HOSTS[idx]}:${OSD_DEVICES[idx]}"
    trace_off
  done

  common::info "Sleep for 20 seconds"
  sleep 20
}


ceph_deploy::deploy() {
  reset_host_devices
  bootstrap_cluster

  exit_trap() {
    local exit_status=$?
    trace_off
    show_status
    exit $exit_status
  }
  trap exit_trap EXIT

  add_hosts
  add_host_devices_as_osds
}

# When CMD_MODE is true, this script is called from command line.
# Otherwise, we assume this script is called by another script, and
# therefore can later perform the actual run by calling the run function.
if [[ "${CMD_MODE:-true}" == true ]]; then
  ceph_deploy::deploy
fi

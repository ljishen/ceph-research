#!/usr/bin/env bash
#
# Require bash version >= 4.4
#
# This script depends on passwordless ssh and passwordless sudo via the current
# user ($USER) on remote hosts.
#
# The installation process is following the docker docs:
#   https://docs.docker.com/engine/install/

set -euo pipefail

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# shellcheck source=./common.sh
. "$SCRIPT_DIR/common.sh"


usage() {
  cat <<EOF
Usage: $0 OPTIONS

Options:
  -h HOST_FILE, --hosts=HOST_FILE
                        hosts file (each line "[user@]host[:port]")
  -H HOST_STRING, --host=HOST_STRING
                        additional host entries ("[user@]host[:port]")
EOF
}

if (( $# == 0 )); then
  usage
  exit
fi


HOST_PARAMS=()
# loop positional params: https://unix.stackexchange.com/a/314041
for (( idx = 1; idx <= $#; idx++ )); do
  if [[ "${!idx}" == @(-h|-H|--hosts|--host) ]]; then
    HOST_PARAMS+=("${!idx}")
    (( idx++ ))
    if [[ -z "${!idx:-}" ]]; then
      usage
      common::err $(( ERR_STATUS_START + 1 )) "Missing parameter for '${HOST_PARAMS[-1]}'"
    fi
    HOST_PARAMS+=("${!idx}")
    continue
  fi

  if [[ "${!idx}" =~ ^(--hosts=|--host=) ]]; then
    HOST_PARAMS+=("${!idx}")
    continue
  fi

  common::err $(( ERR_STATUS_START + 2 )) "Unsupport parameter '${!idx}'"
done

trace_on
"$SCRIPT_DIR"/parallel-ssh \
  "${HOST_PARAMS[@]}" \
  env INFO_LEVEL="${INFO_LEVEL:-0}" bash <<'EOF'
set -euo pipefail

INFO_PREFIX=''
if (( INFO_LEVEL )); then
  INFO_PREFIX="$(printf '%0.s>' $(seq 1 $INFO_LEVEL)) "
fi
_info() { printf "\\033[1;32m[INFO] %s%s\\033[0m\\n" "$INFO_PREFIX" "$*"; }
_err() {
  local -ir exit_status="$1"
  shift
  printf "\\033[1;31m[ERROR] %s\\033[0m\\n" "$*" >&2
  exit "$exit_status"
}

get_distro() {
  local distro
  distro="$(head -n1 /etc/issue | awk '{ print tolower($1) }')"
  if [[ "$distro" != @(ubuntu|debian) ]]; then
    _err 1 "Only support Ubuntu and Debian platforms"
  fi
  echo "$distro"
}
SYS_DISTRO="$(get_distro)"

get_arch() {
  local machine_name arch
  machine_name="$(uname -m)"
  if [[ "$machine_name" == "aarch64" ]]; then
    arch=arm64
  elif [[ "$machine_name" == "armv7l" ]]; then
    arch=armhf
  elif [[ "$machine_name" == "x86_64" ]]; then
    arch=amd64
  else
    _err 1 "Docker does not support architecture '$machine_name'"
  fi
  echo "$arch"
}
SYS_ARCH="$(get_arch)"


export DEBIAN_FRONTEND=noninteractive

_info "Uninstall old versions..."
sudo apt-get --yes purge \
  docker docker-engine docker.io containerd runc >/dev/null 2>&1 || true

_info "Set up Docker's repositories..."
sudo apt-get update >/dev/null
sudo apt-get --yes --no-install-recommends install \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg-agent \
  software-properties-common >/dev/null

# Circumvent the "Warning: apt-key output should not be parsed (stdout is not a terminal)"
#   https://stackoverflow.com/a/49462622
curl -fsSL https://download.docker.com/linux/"$SYS_DISTRO"/gpg \
  | sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add - >/dev/null

sudo add-apt-repository --yes --update \
  "deb [arch=$SYS_ARCH] https://download.docker.com/linux/$SYS_DISTRO \
  $(lsb_release -cs) \
  stable" >/dev/null

_info "Install docker engine..."
sudo apt-get --yes --no-install-recommends install \
  docker-ce docker-ce-cli containerd.io >/dev/null

_info "Add current user ($USER) to the docker group..."
sudo usermod -aG docker $USER

if [[ -d "$HOME/.docker" ]]; then
  _info "Fix possible permission error"
  sudo chown "$(id --user --name)":"$(id --group --name)" "$HOME/.docker" -R
  sudo chmod g+rwx "$HOME/.docker" -R
fi

_info "Done!"

# executing this command will replace the current shell and
# lose our defined functions. So I put it at the end.
newgrp docker
EOF
trace_off

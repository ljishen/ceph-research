#!/usr/bin/env bash
#
# Require bash version >= 4.4
#
# This script depends on passwordless ssh to and passwordless sudo on remote hosts.

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. >/dev/null 2>&1 && pwd )"
readonly SCRIPT_DIR
# shellcheck source=../common.sh
. "$SCRIPT_DIR/common.sh"

# =============== CONFIGURATIONS TO CHANGE ===============
## This option can only be "dev" or "release"
readonly CLUSTER_TYPE=release

## The ceph host will run mon and mgr docker daemons. The osd deamons will also
## run on this host if OSD_HOST is not defined.
readonly CEPH_HOST="10.10.2.1" \
         CEPH_USER="ljishen"

readonly RADOS_BENCH_CPU_AFFINITY=32-63,96-127

readonly POOL_NAME=bench_rados \
         NUM_PGS=128 \
         POOL_SIZE=1 \
         OBJECT_SIZES=(4KB 16KB 64KB 256KB 1MB 4MB 16MB)

readonly ROUNDS_PER_TEST=3 \
         RADOS_BENCH_RUN_LENTH_SECS=60


declare -rA LOCAL_CEPH_CONF_OPTIONS=(
#  ['ms_async_rdma_device_name']=mlx5_2
#  ['ms_async_rdma_local_gid']=0000:0000:0000:0000:0000:ffff:0a0a:0101
)

## The following options only work for CLUSTER_TYPE of "dev"
readonly CEPH_HOST_CPU_AFFINITY=0-7
readonly CEPH_HOST_SRC_BUILD_DIR=/mnt/sda8/ceph/build

## The following options only work for CLUSTER_TYPE of "release"
### the OSD_HOSTNAME will be auto fetched if not set
OSD_HOSTNAME=
### dev cluster will overwrite OSD_HOST to CEPH_HOST
OSD_HOST="10.10.2.2"
readonly OSD_DRIVE=/dev/nvme0n1
# =============== CONFIGURATIONS TO CHANGE ===============


if [[ "$CLUSTER_TYPE" != @(dev|release) ]]; then
  common::err $(( ERR_STATUS_START + 1 )) \
    "Invalid CLUSTER_TYPE '$CLUSTER_TYPE' (must be 'dev' or 'release')."
fi

if [[ "$CLUSTER_TYPE" == "dev" ]]; then
  OSD_HOST="$CEPH_HOST"
fi


readonly LOCAL_CEPH_CONF_DIR="$DEPLOYMENT_DATA_ROOT"/etc/ceph \
         OUTPUT_DIR="$PWD"/output \
         REMOTE_OUTPUT_DIR=/tmp/bench-rados
mkdir --parents "$LOCAL_CEPH_CONF_DIR" "$OUTPUT_DIR"
sudo chown --changes --recursive  "$USER" "$DEPLOYMENT_DATA_ROOT" "$OUTPUT_DIR"
"$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$CEPH_HOST" \
  mkdir --parents "$REMOTE_OUTPUT_DIR"
if [[ "$CLUSTER_TYPE" == "release" ]]; then
  "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$OSD_HOST" \
    mkdir --parents "$REMOTE_OUTPUT_DIR"
fi


if ! common::is_program_installed "sar"; then
  common::err $(( ERR_STATUS_START + 2 )) "Please install sysstat."
fi
pkill -TERM --euid "$USER" --exact sar || true

if ! "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$OSD_HOST" bash <<< "
  command -v sar >/dev/null 2>&1 && \
    (pkill -TERM --euid $CEPH_USER --exact sar || true)"; then
  common::err $(( ERR_STATUS_START + 2 )) "Please install sysstat on the ceph OSD host."
fi


readonly LOCAL_CEPH_SHELL=" \
  ${RADOS_BENCH_CPU_AFFINITY:+taskset --cpu-list $RADOS_BENCH_CPU_AFFINITY} \
  $SCRIPT_DIR/ceph-shell --"

# https://stackoverflow.com/a/61835747/2926646
is_uint() { case $1 in '' | *[!0-9]* ) return 1;; esac; }

#######################################
# Count the number of CPUs in a cpu-list string.
# Arguments:
#   A cpu-list string as documented for "--cpu-list" used by command taskset,
#    https://man7.org/linux/man-pages/man1/taskset.1.html#OPTIONS
# Returns:
#   The number of CPUs specified by the cpu-list string.
#######################################
count_cpus() {
  trace_off

  local -r cpu_list="$1"
  local -a components nums
  local -i idx cpu_count=0

  IFS=',' read -ra components <<< "$cpu_list"
  for comp in "${components[@]}"; do
    IFS='-' read -ra nums <<< "$comp"
    for (( idx = 0; idx < ${#nums[@]}; ++idx )); do
      if ! is_uint "${nums[idx]}"; then
        common::err $(( ERR_STATUS_START + 1 )) \
          "Cpu-list $cpu_list contains non-integer value in '$comp'"
      fi
    done

    if (( ${#nums[@]} == 1 )); then      # comp is a single number
      (( ++cpu_count ))
    elif (( ${#nums[@]} == 2 )); then    # comp is a range
      if (( nums[0] > nums[1] )); then
        common::err $(( ERR_STATUS_START + 1 )) \
          "Invalid cpu-list in $cpu_list: start > end (start: ${nums[0]}, end: ${nums[1]})"
      fi
      (( cpu_count += nums[1] - nums[0] + 1 ))
    else
      common::err $(( ERR_STATUS_START + 1 )) "Invalid cpu-list format in $cpu_list"
    fi
  done

  echo "$cpu_count"

  trace_resume
}

launch_ceph_cluster() {
  common::stage "Launch a Ceph cluster (CEPH_HOST: $CEPH_HOST, OSD_HOST: $OSD_HOST) ..."
  (( ++INFO_LEVEL ))

  local -r ceph_keyring_filename=ceph.client.admin.keyring

  if [[ "$CLUSTER_TYPE" == "dev" ]]; then
    common::info "Stop and start a new $CLUSTER_TYPE cluster"
    trace_on
    "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$CEPH_HOST" \
      bash -euo pipefail <<EOF
cd "$CEPH_HOST_SRC_BUILD_DIR"
../src/stop.sh && rm --force --recursive out dev
ulimit -l unlimited

MON=1 OSD=1 MDS=0 MGR=1 FS=0 RGW=0 NFS=0 \
  ${CEPH_HOST_CPU_AFFINITY:+taskset --cpu-list $CEPH_HOST_CPU_AFFINITY} \
  ../src/vstart.sh \
  -d -n -x -i "$CEPH_HOST" --without-dashboard --memstore
EOF
    trace_off

    common::info "Copy configuration files to local"
    trace_on
    scp -C "${SSH_COMM_OPTIONS[@]}" -p \
      "$CEPH_USER"@"$CEPH_HOST":"$CEPH_HOST_SRC_BUILD_DIR"/ceph.conf \
      "$LOCAL_CEPH_CONF_DIR"/ceph.conf
    scp -C "${SSH_COMM_OPTIONS[@]}" -p \
      "$CEPH_USER"@"$CEPH_HOST":"$CEPH_HOST_SRC_BUILD_DIR"/keyring \
      "$LOCAL_CEPH_CONF_DIR"/"$ceph_keyring_filename"
    trace_off

  elif [[ "$CLUSTER_TYPE" == "release" ]]; then
    local -r remote_repo_dir="$REMOTE_OUTPUT_DIR"/ceph-research
    local -r remote_scripts="$remote_repo_dir"/scripts
    local -r remote_ceph_config_dir="$REMOTE_OUTPUT_DIR"/"$(basename -- "$DEPLOYMENT_DATA_ROOT")"/etc/ceph

    if [[ -z "${OSD_HOSTNAME:-}" ]]; then
      common::info "Get OSD hostname"
      trace_on
      OSD_HOSTNAME=$("$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$OSD_HOST" \
        uname --nodename | tail -n1)
      trace_off
    fi

    trace_on
    "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$CEPH_HOST" \
      bash -euo pipefail <<EOF
if ! [[ -d "$remote_repo_dir" ]]; then
  git clone https://github.com/ljishen/ceph-research.git "$remote_repo_dir"
else
  ( cd "$remote_repo_dir" && git fetch && git reset --hard origin/main )
fi >/dev/null 2>&1

cd "$REMOTE_OUTPUT_DIR"

. "$remote_scripts"/common.sh
INFO_LEVEL=$INFO_LEVEL

common::info "Remove existing clusters"
if [[ -d /var/lib/ceph ]]; then
  for fsid_dir in /var/lib/ceph/*; do
    # skip if /var/lib/ceph/ is empty
    [[ -d \$fsid_dir ]] || continue
    trace_on
    "$remote_scripts"/parallel-cephadm \
      --host "$CEPH_HOST" --host "$OSD_HOST" \
      rm-cluster --force \
      --fsid \$(basename -- "\$fsid_dir")
    trace_off
  done
fi

common::info "Deploy a new cluster"
trace_on
"$remote_scripts"/ceph-deploy -m "$CEPH_HOST" -o "$OSD_HOSTNAME"/"$OSD_HOST":"$OSD_DRIVE" 2>&1
trace_off
EOF
    trace_off

    common::info "Copy configuration files to local"
    trace_on
    # change the owner so we can copy files from the dir
    "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$CEPH_HOST" \
      sudo chown --changes --recursive "$CEPH_USER" "$remote_ceph_config_dir"

    scp -C "${SSH_COMM_OPTIONS[@]}" -p \
      "$CEPH_USER"@"$CEPH_HOST":"$remote_ceph_config_dir"/ceph.conf \
      "$LOCAL_CEPH_CONF_DIR"/ceph.conf
    scp -C "${SSH_COMM_OPTIONS[@]}" -p \
      "$CEPH_USER"@"$CEPH_HOST":"$remote_ceph_config_dir"/"$ceph_keyring_filename" \
      "$LOCAL_CEPH_CONF_DIR"/"$ceph_keyring_filename"
    trace_off

  else
    common::err $(( ERR_STATUS_START + 3 )) "Unsupport CLUSTER_TYPE: $CLUSTER_TYPE"
  fi
}

update_local_ceph_conf() {
  common::stage "Update local ceph.conf as a client..."

  local option
  for option in "${!LOCAL_CEPH_CONF_OPTIONS[@]}"; do
    trace_on
    # ensure the pattern exists in file
    grep --fixed-strings --word-regexp --quiet "$option" \
      "$LOCAL_CEPH_CONF_DIR"/ceph.conf

    sed --in-place --regexp-extended \
      "s/($option *=).*$/\1 ${LOCAL_CEPH_CONF_OPTIONS[$option]}/g" \
      "$LOCAL_CEPH_CONF_DIR"/ceph.conf
    trace_off
  done
}

configure_ceph_pool() {
  common::stage "Configure Ceph pool..."

  trace_on
  $LOCAL_CEPH_SHELL ceph config set osd osd_max_backfills 32
  $LOCAL_CEPH_SHELL ceph config set osd osd_recovery_max_active 32
  $LOCAL_CEPH_SHELL ceph config set osd osd_recovery_max_single_start 8
  $LOCAL_CEPH_SHELL ceph config set osd osd_recovery_op_priority 63

  $LOCAL_CEPH_SHELL ceph config show-with-defaults osd.0 \
    | grep 'osd_max_backfills\|osd_recovery' | column -t -s ' '

  $LOCAL_CEPH_SHELL ceph osd pool create "$POOL_NAME" \
    "$NUM_PGS" "$NUM_PGS" replicated --size "$POOL_SIZE" --pg-num-min "$NUM_PGS"
  $LOCAL_CEPH_SHELL ceph osd pool set "$POOL_NAME" min_size 1
  $LOCAL_CEPH_SHELL ceph osd pool set "$POOL_NAME" pg_autoscale_mode off
  $LOCAL_CEPH_SHELL ceph osd pool application enable "$POOL_NAME" benchmark
  $LOCAL_CEPH_SHELL ceph osd pool set "$POOL_NAME" noscrub 1
  $LOCAL_CEPH_SHELL ceph osd pool set "$POOL_NAME" nodeep-scrub 1
  $LOCAL_CEPH_SHELL ceph osd pool ls detail
  $LOCAL_CEPH_SHELL ceph osd df tree
  trace_off
}

object_size_bytes() {
  local -r input="$1"
  local -r num="${input%%[^0-9]*}"

  if [[ "$input" =~ (KB|kb)$ ]]; then
    echo $(( 2 ** 10 * num ))
  elif [[ "$input" =~ (MB|mb)$ ]]; then
    echo $(( 2 ** 20 * num ))
  elif [[ "$input" =~ (GB|gb)$ ]]; then
    echo $(( 2 ** 30 * num ))
  elif [[ "$input" == "$num"B ]] || [[ "$input" == "$num"b ]] || [[ "$input" == "$num" ]]; then
    echo "$num"
  else
    common::err $(( ERR_STATUS_START + 1 )) "Unsupport object size: $input"
  fi
}

wait_till_cluster_idle() {
  common::stage "Wait for the cluster to become idle..."

  sleep 20
  INFO_LEVEL=2

  local cluster_status idle_count=0 idle_count_max=5
  while true; do
    cluster_status="$(
      $LOCAL_CEPH_SHELL ceph --status 2>&1 \
        | sed --quiet "/data:/,\$p"
    )"
    common::info "$cluster_status"

    if grep "progress:" <<< "$cluster_status" >/dev/null; then
      idle_count=0
    else
      (( idle_count += 1 ))
      common::info "Counting down idle state [$idle_count/$idle_count_max]"

      if (( idle_count == idle_count_max )); then
        break
      fi
    fi
    sleep 5
  done

  INFO_LEVEL=1 common::info "The cluster is idle now."
}

rados_bench() {
  local -r mode="$1" round_idx="$2" object_size="$3"

  common::stage "Start benchmarking of mode $mode ..."
  (( ++INFO_LEVEL ))

  local -r sysstat_file_rados_bench_host="$OUTPUT_DIR"/sys_activity_"$object_size"_"$mode".dat.rados_bench_host."$round_idx" \
           sysstat_file_osd_host="$REMOTE_OUTPUT_DIR"/sys_activity_"$object_size"_"$mode".dat.osd_host."$round_idx" \
           object_size_bytes="$(object_size_bytes "$object_size")"

  local -i sar_pid_rados_bench_host sar_pid_osd_host

  common::info "Start system activity collection services"
  (( ++INFO_LEVEL ))

  common::info "for rados-bench host"
  trace_on
  rm --force "$sysstat_file_rados_bench_host"
  S_TIME_FORMAT=ISO sar -A -o "$sysstat_file_rados_bench_host" 2 >/dev/null 2>&1 & sar_pid_rados_bench_host=$!
  trace_off

  common::info "for OSD host"
  common::create_stdout_dup
  sar_pid_osd_host="$(
    "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$OSD_HOST" \
      bash 2>&1 <<EOF | common::to_stdout_dup | tail -n1
rm --force $sysstat_file_osd_host
S_TIME_FORMAT=ISO sar -A -o $sysstat_file_osd_host 2 >/dev/null 2>&1 & echo \$!
EOF
  )"

  (( --INFO_LEVEL ))
  common::info "Run rados bench"

  if [[ "$mode" == "write" ]]; then
    trace_on
    $LOCAL_CEPH_SHELL \
      rados bench "$RADOS_BENCH_RUN_LENTH_SECS" write \
      --pool "$POOL_NAME" \
      -b "$object_size_bytes" \
      -O "$object_size_bytes" \
      --concurrent-ios $(( $(count_cpus "$RADOS_BENCH_CPU_AFFINITY") * 2 )) \
      --show-time \
      --write-object \
      --write-omap \
      --write-xattr \
      --no-cleanup 2>&1 | tee "$OUTPUT_DIR"/rados_bench_"$object_size"_"$mode".log."$round_idx"
    trace_off

  elif [[ "$mode" == "seq" ]]; then
    trace_on
    $LOCAL_CEPH_SHELL \
      rados bench 99999999 seq \
      --pool "$POOL_NAME" \
      --concurrent-ios $(( $(count_cpus "$RADOS_BENCH_CPU_AFFINITY") * 2 )) \
      --show-time 2>&1 | tee "$OUTPUT_DIR"/rados_bench_"$object_size"_"$mode".log."$round_idx"
    trace_off

  else
    common::err $(( ERR_STATUS_START + 3 )) "Unsupport rados bench mode: $mode"
  fi

  common::info "Stop system activity collection services"
  (( ++INFO_LEVEL ))

  common::info "for rados-bench host"
  trace_on
  kill -INT "$sar_pid_rados_bench_host"
  trace_off

  common::info "for OSD host"
  trace_on
  "$SCRIPT_DIR"/parallel-ssh --host "$CEPH_USER"@"$OSD_HOST" \
    kill -INT "$sar_pid_osd_host"
  trace_off

  (( ++INFO_LEVEL ))
  common::info "Copy system activity file from OSD host"
  trace_on
  scp -C "${SSH_COMM_OPTIONS[@]}" -p \
    "$CEPH_USER"@"$OSD_HOST":"$sysstat_file_osd_host" \
    "$OUTPUT_DIR"/"$(basename -- "$sysstat_file_osd_host")"
  trace_off
}


main() {
  local object_size_idx round_idx object_size
  for (( object_size_idx = 0; object_size_idx < ${#OBJECT_SIZES[@]}; ++object_size_idx )); do
    object_size="${OBJECT_SIZES[$object_size_idx]}"
    for round_idx in $(seq $ROUNDS_PER_TEST); do
      printf '\n\n\033[1;7;39;49m[%s][RUNNING][ROUND %d/%d/%d] %s\033[0m\n' \
        "$(common::now)" \
        "$round_idx" \
        "$(( object_size_idx + 1 ))" \
        "$(( ${#OBJECT_SIZES[@]} * ROUNDS_PER_TEST ))" \
        "object_size=$object_size"

      launch_ceph_cluster
      update_local_ceph_conf
      configure_ceph_pool

      wait_till_cluster_idle
      rados_bench "write" "$round_idx" "$object_size"

      wait_till_cluster_idle
      rados_bench "seq" "$round_idx" "$object_size"

      # prevent "got completion with error:"
      wait_till_cluster_idle
    done
  done
}
main
